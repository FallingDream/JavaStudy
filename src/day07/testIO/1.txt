一.正则表达式中一些特殊的字符
1. \d: 匹配所有的数字	\D: 匹配所有非数字(如果想要匹配多位数字,使用量词)
2.\w: 匹配所有的数字字母下划线  \W: 相反
3.\s:  匹配所有的空白符  \S: 相反
4. .(小数点): 可以匹配任意一个字符(除了换行符)  [\s\S]: 匹配包含换行符的任意字符

二.自定义字符集合
1.[abc5@]  匹配a,b,c,5,@字符
2.[^abc]  匹配除了a,b,c的任意字符
3.[f-k]  匹配在f-k之间的任意字符
4.[^f-k0-3]匹配f-k,0-3之外的任意字符
正则表达式中的特殊符号当被包含到[ ]中时，失去特殊意义，除了^  -  
[ ]中的 . , 只表示匹配 .

三.量词
1. {n} 表示重复n次 比如想要匹配4位数字：(\d{4}) 如果表达式为(\d\d{4})，则表达匹配5位数字
2. {m,n} 表示最少m次，最多n次 如(\d{3,6})表示匹配3位数字到6位数字
贪婪模式(默认): 匹配的字符越多越好  -->  34567898 (\d{3,6}) --> [345678]98
非贪婪模式: 匹配的字符越少越好 在量词后面加?-->  34567898 (\d{3,6}?) --> [345][678]98
3.{m,}至少重复m次  (\d{3,})匹配3位数以上的字符，但没有(\d{,6})这种写法，可以写位(\d{1,6})
4.?  匹配表达式0次或者1次相当于{0,1}
5.+  表达式至少出现1次  相当于{1,}
6.*  表达式出现0次或任意次  相当于{0,}

四.字符边界(匹配的不是字符而是位置，符合某种条件的位置，零宽)
1.^  与字符串开始的地方匹配 --> ^i  --> 以i开头的字符串
2.$ 与字符串结束的地方匹配 --> i$  --> 以i结尾的字符串
3.\b 匹配一个单词边界 --> wang\b  --> wang的右边不全是\w 
				比如  wang123不匹配 wang)匹配 123wang匹配
匹配模式:
1.IGNORECASE: 忽略大小写
2.SINGLELINE: 单行模式  整个文本看作一个字符串，只有一个开头，一个结尾
3.MULTILINE:  多行模式 每行都是一个字符串，都有开头和结尾 如果想匹配最开始(结尾)的地方 可以使用\A(\Z)

五.分支结构
1. |  或 匹配左边或右边
2. () 捕获组  每一个捕获组都会分配一个编号，从1开始自动编号 
	   如果需要用到捕获组又不需要保存结果时 使用非捕获组 (?:...)
3. \n 反向引用 
      比如： goto gogo toto dodo to-do
      四个字符，要匹配相同的两个字符时，使用  ([a-z]{2})\1 -->再次匹		配上一个捕获组的结果

六.预搜索(零宽断言)
1. (?=...)      断言后面能匹配...，只会匹配...前的字符，但不会匹配到...
	比如 1. eating doing going ingaaa-->[a-z](?=ing) --> 匹配到eat do go 
	        2. wang12 zhao321 12345-->[a-z](?=/d+) --> 匹配到wang zhao
2. (?<=...)    断言前面能匹配...   
3. (?!...)        断言后面不能匹配...
4. (?<!...)	  断言前面不能匹配...